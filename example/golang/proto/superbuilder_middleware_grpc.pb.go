// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: superbuilder_middleware.proto

package SuperBuilderWinService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuperBuilder_SayHello_FullMethodName               = "/SuperBuilder.SuperBuilder/SayHello"
	SuperBuilder_SayHelloPyllm_FullMethodName          = "/SuperBuilder.SuperBuilder/SayHelloPyllm"
	SuperBuilder_Chat_FullMethodName                   = "/SuperBuilder.SuperBuilder/Chat"
	SuperBuilder_StopChat_FullMethodName               = "/SuperBuilder.SuperBuilder/StopChat"
	SuperBuilder_LoadModels_FullMethodName             = "/SuperBuilder.SuperBuilder/LoadModels"
	SuperBuilder_CheckHealth_FullMethodName            = "/SuperBuilder.SuperBuilder/CheckHealth"
	SuperBuilder_AddFeedback_FullMethodName            = "/SuperBuilder.SuperBuilder/AddFeedback"
	SuperBuilder_AddFiles_FullMethodName               = "/SuperBuilder.SuperBuilder/AddFiles"
	SuperBuilder_StopAddFiles_FullMethodName           = "/SuperBuilder.SuperBuilder/StopAddFiles"
	SuperBuilder_RemoveFiles_FullMethodName            = "/SuperBuilder.SuperBuilder/RemoveFiles"
	SuperBuilder_DownloadFiles_FullMethodName          = "/SuperBuilder.SuperBuilder/DownloadFiles"
	SuperBuilder_GetFileList_FullMethodName            = "/SuperBuilder.SuperBuilder/GetFileList"
	SuperBuilder_SetModels_FullMethodName              = "/SuperBuilder.SuperBuilder/SetModels"
	SuperBuilder_UnloadModels_FullMethodName           = "/SuperBuilder.SuperBuilder/UnloadModels"
	SuperBuilder_SetParameters_FullMethodName          = "/SuperBuilder.SuperBuilder/SetParameters"
	SuperBuilder_ClientDisconnected_FullMethodName     = "/SuperBuilder.SuperBuilder/ClientDisconnected"
	SuperBuilder_GetClientConfig_FullMethodName        = "/SuperBuilder.SuperBuilder/GetClientConfig"
	SuperBuilder_GetChatHistory_FullMethodName         = "/SuperBuilder.SuperBuilder/GetChatHistory"
	SuperBuilder_GetSoftwareUpdate_FullMethodName      = "/SuperBuilder.SuperBuilder/GetSoftwareUpdate"
	SuperBuilder_SetVectorDB_FullMethodName            = "/SuperBuilder.SuperBuilder/SetVectorDB"
	SuperBuilder_RemoveSession_FullMethodName          = "/SuperBuilder.SuperBuilder/RemoveSession"
	SuperBuilder_SetSessionName_FullMethodName         = "/SuperBuilder.SuperBuilder/SetSessionName"
	SuperBuilder_SetActiveAssistant_FullMethodName     = "/SuperBuilder.SuperBuilder/SetActiveAssistant"
	SuperBuilder_SetAssistantViewModel_FullMethodName  = "/SuperBuilder.SuperBuilder/SetAssistantViewModel"
	SuperBuilder_SetUserConfigViewModel_FullMethodName = "/SuperBuilder.SuperBuilder/SetUserConfigViewModel"
	SuperBuilder_ConvertModel_FullMethodName           = "/SuperBuilder.SuperBuilder/ConvertModel"
	SuperBuilder_UploadModel_FullMethodName            = "/SuperBuilder.SuperBuilder/UploadModel"
	SuperBuilder_ExportUserConfig_FullMethodName       = "/SuperBuilder.SuperBuilder/ExportUserConfig"
	SuperBuilder_ImportUserConfig_FullMethodName       = "/SuperBuilder.SuperBuilder/ImportUserConfig"
)

// SuperBuilderClient is the client API for SuperBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type SuperBuilderClient interface {
	// Send a greeting ( For connection testing )
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	// Send a greeting ( For connection testing )
	SayHelloPyllm(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	// Send a chat message and stream returns a response
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error)
	// Sends signal to safely stop the current chat request
	StopChat(ctx context.Context, in *StopChatRequest, opts ...grpc.CallOption) (*StopChatResponse, error)
	// Loads the models and any other backend components before chatting
	LoadModels(ctx context.Context, in *LoadModelsRequest, opts ...grpc.CallOption) (*LoadModelsResponse, error)
	// Check on health status backend system / service (for example: RAG check)
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
	// Give LLM feedback on a question's response to improve future responses
	AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*AddFeedbackResponse, error)
	// Upload a list of files to the RAG module to be vector stored, stream the upload progress
	AddFiles(ctx context.Context, in *AddFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AddFilesResponse], error)
	// Sends signal to stop the current upload file request
	StopAddFiles(ctx context.Context, in *StopAddFilesRequest, opts ...grpc.CallOption) (*StopAddFilesResponse, error)
	// Remove a list of files from RAG doc store
	RemoveFiles(ctx context.Context, in *RemoveFilesRequest, opts ...grpc.CallOption) (*RemoveFilesResponse, error)
	// Request to download a certain list of models, or just all required models if not specified
	DownloadFiles(ctx context.Context, in *DownloadFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFilesResponse], error)
	// Request list of all files uploaded to the loaded document store
	GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error)
	// Set and load models in the backend given a model path
	SetModels(ctx context.Context, in *SetModelsRequest, opts ...grpc.CallOption) (*SetModelsResponse, error)
	// Unloads models that are in the backend
	UnloadModels(ctx context.Context, in *UnloadModelsRequest, opts ...grpc.CallOption) (*UnloadModelsResponse, error)
	// Change the RAG, LLM, and backend parameters
	SetParameters(ctx context.Context, in *SetParametersRequest, opts ...grpc.CallOption) (*SetParametersResponse, error)
	// Inform the server that the client has disconnected
	ClientDisconnected(ctx context.Context, in *ClientDisconnectedRequest, opts ...grpc.CallOption) (*ClientDisconnectedResponse, error)
	// Get config info from middleware
	GetClientConfig(ctx context.Context, in *GetClientConfigRequest, opts ...grpc.CallOption) (*GetClientConfigResponse, error)
	// Get chat history messages from middleware
	GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error)
	// Send a greeting ( For connection testing )
	GetSoftwareUpdate(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	// Setting Vector DB of default assistant in sqlite db.
	SetVectorDB(ctx context.Context, in *SetVectorDBRequest, opts ...grpc.CallOption) (*SetVectorDBResponse, error)
	// Removes a session and all data related to session from database given session id
	RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error)
	// Update a session name given a valid unique session id
	SetSessionName(ctx context.Context, in *SetSessionNameRequest, opts ...grpc.CallOption) (*SetSessionNameResponse, error)
	// Set Active Assistant or Models
	SetActiveAssistant(ctx context.Context, in *SetActiveAssistantRequest, opts ...grpc.CallOption) (*SetActiveAssistantResponse, error)
	// Using an AssistantViewModel it will set the sqlite database active assistant to those fields.
	SetAssistantViewModel(ctx context.Context, in *SetAssistantViewModelRequest, opts ...grpc.CallOption) (*SetAssistantViewModelResponse, error)
	// Using UserConfigViewModel, sets sqlite database userconfig jsonappsettings to the corresponding fields.
	SetUserConfigViewModel(ctx context.Context, in *SetUserConfigViewModelRequest, opts ...grpc.CallOption) (*SetUserConfigViewModelResponse, error)
	ConvertModel(ctx context.Context, in *ConvertModelRequest, opts ...grpc.CallOption) (*ConvertModelResponse, error)
	UploadModel(ctx context.Context, in *UploadModelRequest, opts ...grpc.CallOption) (*UploadModelResponse, error)
	ExportUserConfig(ctx context.Context, in *ExportUserConfigRequest, opts ...grpc.CallOption) (*ExportUserConfigResponse, error)
	ImportUserConfig(ctx context.Context, in *ImportUserConfigRequest, opts ...grpc.CallOption) (*ImportUserConfigResponse, error)
}

type superBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperBuilderClient(cc grpc.ClientConnInterface) SuperBuilderClient {
	return &superBuilderClient{cc}
}

func (c *superBuilderClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SayHelloPyllm(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SayHelloPyllm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SuperBuilder_ServiceDesc.Streams[0], SuperBuilder_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatRequest, ChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_ChatClient = grpc.ServerStreamingClient[ChatResponse]

func (c *superBuilderClient) StopChat(ctx context.Context, in *StopChatRequest, opts ...grpc.CallOption) (*StopChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopChatResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_StopChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) LoadModels(ctx context.Context, in *LoadModelsRequest, opts ...grpc.CallOption) (*LoadModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadModelsResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_LoadModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckHealthResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_CheckHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*AddFeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFeedbackResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_AddFeedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) AddFiles(ctx context.Context, in *AddFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AddFilesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SuperBuilder_ServiceDesc.Streams[1], SuperBuilder_AddFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AddFilesRequest, AddFilesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_AddFilesClient = grpc.ServerStreamingClient[AddFilesResponse]

func (c *superBuilderClient) StopAddFiles(ctx context.Context, in *StopAddFilesRequest, opts ...grpc.CallOption) (*StopAddFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopAddFilesResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_StopAddFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) RemoveFiles(ctx context.Context, in *RemoveFilesRequest, opts ...grpc.CallOption) (*RemoveFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFilesResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_RemoveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) DownloadFiles(ctx context.Context, in *DownloadFilesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFilesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SuperBuilder_ServiceDesc.Streams[2], SuperBuilder_DownloadFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFilesRequest, DownloadFilesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_DownloadFilesClient = grpc.ServerStreamingClient[DownloadFilesResponse]

func (c *superBuilderClient) GetFileList(ctx context.Context, in *GetFileListRequest, opts ...grpc.CallOption) (*GetFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileListResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_GetFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetModels(ctx context.Context, in *SetModelsRequest, opts ...grpc.CallOption) (*SetModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetModelsResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) UnloadModels(ctx context.Context, in *UnloadModelsRequest, opts ...grpc.CallOption) (*UnloadModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnloadModelsResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_UnloadModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetParameters(ctx context.Context, in *SetParametersRequest, opts ...grpc.CallOption) (*SetParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetParametersResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) ClientDisconnected(ctx context.Context, in *ClientDisconnectedRequest, opts ...grpc.CallOption) (*ClientDisconnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientDisconnectedResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_ClientDisconnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) GetClientConfig(ctx context.Context, in *GetClientConfigRequest, opts ...grpc.CallOption) (*GetClientConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientConfigResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_GetClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatHistoryResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_GetChatHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) GetSoftwareUpdate(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_GetSoftwareUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetVectorDB(ctx context.Context, in *SetVectorDBRequest, opts ...grpc.CallOption) (*SetVectorDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVectorDBResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetVectorDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) RemoveSession(ctx context.Context, in *RemoveSessionRequest, opts ...grpc.CallOption) (*RemoveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSessionResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_RemoveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetSessionName(ctx context.Context, in *SetSessionNameRequest, opts ...grpc.CallOption) (*SetSessionNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSessionNameResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetSessionName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetActiveAssistant(ctx context.Context, in *SetActiveAssistantRequest, opts ...grpc.CallOption) (*SetActiveAssistantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActiveAssistantResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetActiveAssistant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetAssistantViewModel(ctx context.Context, in *SetAssistantViewModelRequest, opts ...grpc.CallOption) (*SetAssistantViewModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAssistantViewModelResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetAssistantViewModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) SetUserConfigViewModel(ctx context.Context, in *SetUserConfigViewModelRequest, opts ...grpc.CallOption) (*SetUserConfigViewModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserConfigViewModelResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_SetUserConfigViewModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) ConvertModel(ctx context.Context, in *ConvertModelRequest, opts ...grpc.CallOption) (*ConvertModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertModelResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_ConvertModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) UploadModel(ctx context.Context, in *UploadModelRequest, opts ...grpc.CallOption) (*UploadModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadModelResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_UploadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) ExportUserConfig(ctx context.Context, in *ExportUserConfigRequest, opts ...grpc.CallOption) (*ExportUserConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportUserConfigResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_ExportUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superBuilderClient) ImportUserConfig(ctx context.Context, in *ImportUserConfigRequest, opts ...grpc.CallOption) (*ImportUserConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportUserConfigResponse)
	err := c.cc.Invoke(ctx, SuperBuilder_ImportUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperBuilderServer is the server API for SuperBuilder service.
// All implementations must embed UnimplementedSuperBuilderServer
// for forward compatibility.
//
// The greeting service definition.
type SuperBuilderServer interface {
	// Send a greeting ( For connection testing )
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// Send a greeting ( For connection testing )
	SayHelloPyllm(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// Send a chat message and stream returns a response
	Chat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error
	// Sends signal to safely stop the current chat request
	StopChat(context.Context, *StopChatRequest) (*StopChatResponse, error)
	// Loads the models and any other backend components before chatting
	LoadModels(context.Context, *LoadModelsRequest) (*LoadModelsResponse, error)
	// Check on health status backend system / service (for example: RAG check)
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
	// Give LLM feedback on a question's response to improve future responses
	AddFeedback(context.Context, *AddFeedbackRequest) (*AddFeedbackResponse, error)
	// Upload a list of files to the RAG module to be vector stored, stream the upload progress
	AddFiles(*AddFilesRequest, grpc.ServerStreamingServer[AddFilesResponse]) error
	// Sends signal to stop the current upload file request
	StopAddFiles(context.Context, *StopAddFilesRequest) (*StopAddFilesResponse, error)
	// Remove a list of files from RAG doc store
	RemoveFiles(context.Context, *RemoveFilesRequest) (*RemoveFilesResponse, error)
	// Request to download a certain list of models, or just all required models if not specified
	DownloadFiles(*DownloadFilesRequest, grpc.ServerStreamingServer[DownloadFilesResponse]) error
	// Request list of all files uploaded to the loaded document store
	GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error)
	// Set and load models in the backend given a model path
	SetModels(context.Context, *SetModelsRequest) (*SetModelsResponse, error)
	// Unloads models that are in the backend
	UnloadModels(context.Context, *UnloadModelsRequest) (*UnloadModelsResponse, error)
	// Change the RAG, LLM, and backend parameters
	SetParameters(context.Context, *SetParametersRequest) (*SetParametersResponse, error)
	// Inform the server that the client has disconnected
	ClientDisconnected(context.Context, *ClientDisconnectedRequest) (*ClientDisconnectedResponse, error)
	// Get config info from middleware
	GetClientConfig(context.Context, *GetClientConfigRequest) (*GetClientConfigResponse, error)
	// Get chat history messages from middleware
	GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error)
	// Send a greeting ( For connection testing )
	GetSoftwareUpdate(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	// Setting Vector DB of default assistant in sqlite db.
	SetVectorDB(context.Context, *SetVectorDBRequest) (*SetVectorDBResponse, error)
	// Removes a session and all data related to session from database given session id
	RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error)
	// Update a session name given a valid unique session id
	SetSessionName(context.Context, *SetSessionNameRequest) (*SetSessionNameResponse, error)
	// Set Active Assistant or Models
	SetActiveAssistant(context.Context, *SetActiveAssistantRequest) (*SetActiveAssistantResponse, error)
	// Using an AssistantViewModel it will set the sqlite database active assistant to those fields.
	SetAssistantViewModel(context.Context, *SetAssistantViewModelRequest) (*SetAssistantViewModelResponse, error)
	// Using UserConfigViewModel, sets sqlite database userconfig jsonappsettings to the corresponding fields.
	SetUserConfigViewModel(context.Context, *SetUserConfigViewModelRequest) (*SetUserConfigViewModelResponse, error)
	ConvertModel(context.Context, *ConvertModelRequest) (*ConvertModelResponse, error)
	UploadModel(context.Context, *UploadModelRequest) (*UploadModelResponse, error)
	ExportUserConfig(context.Context, *ExportUserConfigRequest) (*ExportUserConfigResponse, error)
	ImportUserConfig(context.Context, *ImportUserConfigRequest) (*ImportUserConfigResponse, error)
	mustEmbedUnimplementedSuperBuilderServer()
}

// UnimplementedSuperBuilderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperBuilderServer struct{}

func (UnimplementedSuperBuilderServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSuperBuilderServer) SayHelloPyllm(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloPyllm not implemented")
}
func (UnimplementedSuperBuilderServer) Chat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedSuperBuilderServer) StopChat(context.Context, *StopChatRequest) (*StopChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChat not implemented")
}
func (UnimplementedSuperBuilderServer) LoadModels(context.Context, *LoadModelsRequest) (*LoadModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadModels not implemented")
}
func (UnimplementedSuperBuilderServer) CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedSuperBuilderServer) AddFeedback(context.Context, *AddFeedbackRequest) (*AddFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedback not implemented")
}
func (UnimplementedSuperBuilderServer) AddFiles(*AddFilesRequest, grpc.ServerStreamingServer[AddFilesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AddFiles not implemented")
}
func (UnimplementedSuperBuilderServer) StopAddFiles(context.Context, *StopAddFilesRequest) (*StopAddFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAddFiles not implemented")
}
func (UnimplementedSuperBuilderServer) RemoveFiles(context.Context, *RemoveFilesRequest) (*RemoveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFiles not implemented")
}
func (UnimplementedSuperBuilderServer) DownloadFiles(*DownloadFilesRequest, grpc.ServerStreamingServer[DownloadFilesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFiles not implemented")
}
func (UnimplementedSuperBuilderServer) GetFileList(context.Context, *GetFileListRequest) (*GetFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedSuperBuilderServer) SetModels(context.Context, *SetModelsRequest) (*SetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetModels not implemented")
}
func (UnimplementedSuperBuilderServer) UnloadModels(context.Context, *UnloadModelsRequest) (*UnloadModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadModels not implemented")
}
func (UnimplementedSuperBuilderServer) SetParameters(context.Context, *SetParametersRequest) (*SetParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParameters not implemented")
}
func (UnimplementedSuperBuilderServer) ClientDisconnected(context.Context, *ClientDisconnectedRequest) (*ClientDisconnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDisconnected not implemented")
}
func (UnimplementedSuperBuilderServer) GetClientConfig(context.Context, *GetClientConfigRequest) (*GetClientConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedSuperBuilderServer) GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedSuperBuilderServer) GetSoftwareUpdate(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoftwareUpdate not implemented")
}
func (UnimplementedSuperBuilderServer) SetVectorDB(context.Context, *SetVectorDBRequest) (*SetVectorDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVectorDB not implemented")
}
func (UnimplementedSuperBuilderServer) RemoveSession(context.Context, *RemoveSessionRequest) (*RemoveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedSuperBuilderServer) SetSessionName(context.Context, *SetSessionNameRequest) (*SetSessionNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionName not implemented")
}
func (UnimplementedSuperBuilderServer) SetActiveAssistant(context.Context, *SetActiveAssistantRequest) (*SetActiveAssistantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActiveAssistant not implemented")
}
func (UnimplementedSuperBuilderServer) SetAssistantViewModel(context.Context, *SetAssistantViewModelRequest) (*SetAssistantViewModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssistantViewModel not implemented")
}
func (UnimplementedSuperBuilderServer) SetUserConfigViewModel(context.Context, *SetUserConfigViewModelRequest) (*SetUserConfigViewModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserConfigViewModel not implemented")
}
func (UnimplementedSuperBuilderServer) ConvertModel(context.Context, *ConvertModelRequest) (*ConvertModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertModel not implemented")
}
func (UnimplementedSuperBuilderServer) UploadModel(context.Context, *UploadModelRequest) (*UploadModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadModel not implemented")
}
func (UnimplementedSuperBuilderServer) ExportUserConfig(context.Context, *ExportUserConfigRequest) (*ExportUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserConfig not implemented")
}
func (UnimplementedSuperBuilderServer) ImportUserConfig(context.Context, *ImportUserConfigRequest) (*ImportUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserConfig not implemented")
}
func (UnimplementedSuperBuilderServer) mustEmbedUnimplementedSuperBuilderServer() {}
func (UnimplementedSuperBuilderServer) testEmbeddedByValue()                      {}

// UnsafeSuperBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperBuilderServer will
// result in compilation errors.
type UnsafeSuperBuilderServer interface {
	mustEmbedUnimplementedSuperBuilderServer()
}

func RegisterSuperBuilderServer(s grpc.ServiceRegistrar, srv SuperBuilderServer) {
	// If the following call pancis, it indicates UnimplementedSuperBuilderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuperBuilder_ServiceDesc, srv)
}

func _SuperBuilder_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SayHelloPyllm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SayHelloPyllm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SayHelloPyllm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SayHelloPyllm(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuperBuilderServer).Chat(m, &grpc.GenericServerStream[ChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_ChatServer = grpc.ServerStreamingServer[ChatResponse]

func _SuperBuilder_StopChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).StopChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_StopChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).StopChat(ctx, req.(*StopChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_LoadModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).LoadModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_LoadModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).LoadModels(ctx, req.(*LoadModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_AddFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).AddFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_AddFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).AddFeedback(ctx, req.(*AddFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_AddFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuperBuilderServer).AddFiles(m, &grpc.GenericServerStream[AddFilesRequest, AddFilesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_AddFilesServer = grpc.ServerStreamingServer[AddFilesResponse]

func _SuperBuilder_StopAddFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAddFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).StopAddFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_StopAddFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).StopAddFiles(ctx, req.(*StopAddFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_RemoveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).RemoveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_RemoveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).RemoveFiles(ctx, req.(*RemoveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_DownloadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuperBuilderServer).DownloadFiles(m, &grpc.GenericServerStream[DownloadFilesRequest, DownloadFilesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuperBuilder_DownloadFilesServer = grpc.ServerStreamingServer[DownloadFilesResponse]

func _SuperBuilder_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_GetFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).GetFileList(ctx, req.(*GetFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetModels(ctx, req.(*SetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_UnloadModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).UnloadModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_UnloadModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).UnloadModels(ctx, req.(*UnloadModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetParameters(ctx, req.(*SetParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_ClientDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDisconnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).ClientDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_ClientDisconnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).ClientDisconnected(ctx, req.(*ClientDisconnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).GetClientConfig(ctx, req.(*GetClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_GetChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).GetChatHistory(ctx, req.(*GetChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_GetSoftwareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).GetSoftwareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_GetSoftwareUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).GetSoftwareUpdate(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetVectorDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVectorDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetVectorDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetVectorDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetVectorDB(ctx, req.(*SetVectorDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_RemoveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).RemoveSession(ctx, req.(*RemoveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetSessionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSessionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetSessionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetSessionName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetSessionName(ctx, req.(*SetSessionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetActiveAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActiveAssistantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetActiveAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetActiveAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetActiveAssistant(ctx, req.(*SetActiveAssistantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetAssistantViewModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAssistantViewModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetAssistantViewModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetAssistantViewModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetAssistantViewModel(ctx, req.(*SetAssistantViewModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_SetUserConfigViewModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserConfigViewModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).SetUserConfigViewModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_SetUserConfigViewModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).SetUserConfigViewModel(ctx, req.(*SetUserConfigViewModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_ConvertModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).ConvertModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_ConvertModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).ConvertModel(ctx, req.(*ConvertModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_UploadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).UploadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_UploadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).UploadModel(ctx, req.(*UploadModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_ExportUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).ExportUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_ExportUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).ExportUserConfig(ctx, req.(*ExportUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperBuilder_ImportUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperBuilderServer).ImportUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperBuilder_ImportUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperBuilderServer).ImportUserConfig(ctx, req.(*ImportUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperBuilder_ServiceDesc is the grpc.ServiceDesc for SuperBuilder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperBuilder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SuperBuilder.SuperBuilder",
	HandlerType: (*SuperBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SuperBuilder_SayHello_Handler,
		},
		{
			MethodName: "SayHelloPyllm",
			Handler:    _SuperBuilder_SayHelloPyllm_Handler,
		},
		{
			MethodName: "StopChat",
			Handler:    _SuperBuilder_StopChat_Handler,
		},
		{
			MethodName: "LoadModels",
			Handler:    _SuperBuilder_LoadModels_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _SuperBuilder_CheckHealth_Handler,
		},
		{
			MethodName: "AddFeedback",
			Handler:    _SuperBuilder_AddFeedback_Handler,
		},
		{
			MethodName: "StopAddFiles",
			Handler:    _SuperBuilder_StopAddFiles_Handler,
		},
		{
			MethodName: "RemoveFiles",
			Handler:    _SuperBuilder_RemoveFiles_Handler,
		},
		{
			MethodName: "GetFileList",
			Handler:    _SuperBuilder_GetFileList_Handler,
		},
		{
			MethodName: "SetModels",
			Handler:    _SuperBuilder_SetModels_Handler,
		},
		{
			MethodName: "UnloadModels",
			Handler:    _SuperBuilder_UnloadModels_Handler,
		},
		{
			MethodName: "SetParameters",
			Handler:    _SuperBuilder_SetParameters_Handler,
		},
		{
			MethodName: "ClientDisconnected",
			Handler:    _SuperBuilder_ClientDisconnected_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _SuperBuilder_GetClientConfig_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _SuperBuilder_GetChatHistory_Handler,
		},
		{
			MethodName: "GetSoftwareUpdate",
			Handler:    _SuperBuilder_GetSoftwareUpdate_Handler,
		},
		{
			MethodName: "SetVectorDB",
			Handler:    _SuperBuilder_SetVectorDB_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _SuperBuilder_RemoveSession_Handler,
		},
		{
			MethodName: "SetSessionName",
			Handler:    _SuperBuilder_SetSessionName_Handler,
		},
		{
			MethodName: "SetActiveAssistant",
			Handler:    _SuperBuilder_SetActiveAssistant_Handler,
		},
		{
			MethodName: "SetAssistantViewModel",
			Handler:    _SuperBuilder_SetAssistantViewModel_Handler,
		},
		{
			MethodName: "SetUserConfigViewModel",
			Handler:    _SuperBuilder_SetUserConfigViewModel_Handler,
		},
		{
			MethodName: "ConvertModel",
			Handler:    _SuperBuilder_ConvertModel_Handler,
		},
		{
			MethodName: "UploadModel",
			Handler:    _SuperBuilder_UploadModel_Handler,
		},
		{
			MethodName: "ExportUserConfig",
			Handler:    _SuperBuilder_ExportUserConfig_Handler,
		},
		{
			MethodName: "ImportUserConfig",
			Handler:    _SuperBuilder_ImportUserConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _SuperBuilder_Chat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddFiles",
			Handler:       _SuperBuilder_AddFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadFiles",
			Handler:       _SuperBuilder_DownloadFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "superbuilder_middleware.proto",
}
